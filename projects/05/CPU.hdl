// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
      // a | c instruction?
      And (a = instruction[15], b = true, out = cBit);
      Not (in = cBit, out = aBit);

      // Set control bits
      And (a = instruction[12], b = cBit, out = caBit);
      And (a = instruction[11], b = cBit, out = c1);
      And (a = instruction[10], b= cBit, out = c2);
      And (a = instruction[9], b = cBit, out = c3);
      And (a = instruction[8], b = cBit, out = c4);
      And (a = instruction[7], b = cBit, out = c5);
      And (a = instruction[6], b = cBit, out = c6);
      And (a = instruction[5], b = cBit, out = aBitOut);
      And (a = instruction[4], b = cBit, out = dBitOut);
      And (a = instruction[3], b = cBit, out = mBitOut);
      And (a = instruction[2], b = cBit, out = j1);
      And (a = instruction[1], b = cBit, out = j2);
      And (a = instruction[0], b = cBit, out = j3);

      // A register
      Mux16     (a = instruction, b = aluOut, sel = aBitOut, out = aIn);
      Or        (a = aBitOut,  b = aBit,   out = aBitLoad);
      ARegister (in = aIn, load = aBitLoad, out = aRegOut);

      // Select A or M
      Mux16     (a = aRegOut, b = inM, sel = caBit, out = aluYIn);

      // D register
      DRegister (in = aluOut, load = dBitOut, out = aluXIn);

      // ALU
      ALU (x = aluXIn, y = aluYIn, zx = c1, nx = c2, zy = c3, ny = c4, f = c5, no = c6, out = aluOut, zr = zr, ng = ng);

      // Program counter
      Not (in = ng, out = notNg);
      Not (in = zr, out = notZr);
      And (a = ng, b = j1, out = jump1);
      And (a = zr, b = j2, out = jump2);
      And (a = notNg, b = notZr, out = jump3Temp);
      And (a = jump3Temp, b = j3, out = jump3);
      Or  (a = jump1, b = jump2, out = loadTemp);
      Or  (a = loadTemp, b = jump3, out = pcLoad);
      PC  (in = aRegOut, reset = reset, inc = true, load = pcLoad, out[0..14] = pc);

      // Outputs
      And16 (a = aluOut, b = true, out = outM);
      And   (a = mBitOut, b = true, out = writeM);
      And16 (a = aRegOut, b = true, out[0..14] = addressM);
}
