// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static boolean black;
    static Array powersOfTwo;

    /** Initializes the Screen. */
    function void init() {
        var int i, powerOfTwo;

        let black = true;

        let powersOfTwo = Array.new(16);
        let powerOfTwo = 1;
        let i = 0;

        while (i < 16) {
            let powersOfTwo[i] = powerOfTwo;
            let powerOfTwo = powerOfTwo + powerOfTwo;
            let i = i + 1;
        }

        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        // The screen has dimensions 512x256 and starts at memory location 16384. Each pixel is
        // represented by one bit, which means there are 512 * 256 / 16 = 8192 words in total.
        var int i;
        let i = 0;

        while (i < 8192) {
            do Memory.poke(16384 + i, 0);
        }

        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let black = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        // The screen has dimensions 512x256 and starts at memory location 16384. Each pixel is
        // represented by one bit. This means each row contains 32 words.
        var int address, bit, word, mask;

        let address = 16384 + (y * 32) + (x / 16);
        let bit = x - ((x / 16) * 16);

        let word = Memory.peek(address);
        let mask = powersOfTwo[bit];

        if (black) {
            do Memory.poke(address, word | mask);
        } else {
            do Memory.poke(address, word & (~mask));
        }

        return;
    }

    // Draws a horizontal line from (x1, y) to (x2, y).
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int wordColor, x, xDiv16;

        if (x1 > x2) {
            do Screen.drawHorizontalLine(x2, x1, y);
            return;
        }

        if (black) {
            let wordColor = -1;
        } else {
            let wordColor = 0;
        }

        let x = x1;

        while (~(x > x2)) {
            let xDiv16 = x / 16;

            if ((x = (xDiv16 * 16)) & ((x  + 15) < x2)) {
                do Memory.poke(16384 + (y * 32) + xDiv16, wordColor);
                let x = x + 16;
            } else {
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }
        }

        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, x, y, adyMinusbdx;
        var boolean dxNegative, dyNegative;

        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        // dx and dy are the total offset from the origin.
        let dx = Math.abs(x2 - x1);
        let dxNegative = x2 < x1;
        let dy = Math.abs(y2 - y1);
        let dyNegative = y2 < y1;

        // a and b are the current offset from the origin.
        let a = 0;
        let b = 0;

        // At each step, we decide whether to increment a or b by comparing a/dx and b/dy.
        // To avoid doing divisions, we can compare a*dy and b*dx.
        let adyMinusbdx = 0;

        while (~((a > dx) | (b > dy))) {
            if (dxNegative) { let x = x1 - a; } else { let x = x1 + a; }
            if (dyNegative) { let y = y1 - b; } else { let y = y1 + b; }

            do Screen.drawPixel(x, y);

            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;

        while (~(y > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int rSquared, dy, dx;

        let rSquared = r * r;
        let dy = -r;

        while (~(dy > r)) {
            let dx = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawHorizontalLine(cx - dx, cx + dx, cy + dy);
            let dy = dy + 1;
        }

        return;
    }
}
