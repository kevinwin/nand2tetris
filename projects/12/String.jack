// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field int length;
    field Array chars;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let length = 0;
        let chars = Array.new(Math.max(1, maxLength));
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do chars.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        let chars[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    // Returns whether the character c is a digit.
    function boolean isDigit(char c) {
        // 0-9 fall between 48-57.
        return (c > 47) & (c < 58);
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var boolean isNegative;
        var int i, absValue;

        if (length = 0) {
            return 0;
        }

        // '-' character code
        if (chars[0] = 45) {
            let isNegative = true;
            let i = 1;
        } else {
            let isNegative = false;
            let i = 0;
        }

        let absValue = 0;

        while ((i < length) & String.isDigit(chars[i])) {
            let absValue = (10 * absValue) + (chars[i] - 48); // 48 is the character code of 0.
            let i = i + 1;
        }

        if (isNegative) {
            return -absValue;
        }

        return absValue;
    }

    // Reverses this String.
    method void reverse() {
        var int halfLength, i;
        var char tmp;

        let halfLength = length / 2;
        let i = 0;

        while (i < halfLength) {
            let tmp = chars[i];
            let chars[i] = chars[length - 1 - i];
            let chars[length - 1 - i] = tmp;
            let i = i + 1;
        }

        return;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        var int i, nextNumber, digit;
        var boolean isNegative;

        if (number < 0) {
            let number = -number;
            let isNegative = true;
        } else {
            let isNegative = false;
        }

        let i = 0;

        while (number > 0) {
            let nextNumber = number / 10;
            let digit = number - (nextNumber * 10);

            // 0's character code is 48.
            let chars[i] = 48 + digit;

            let i = i + 1;
            let number = nextNumber;
        }

        if (isNegative) {
            let length = i + 1;
            let chars[i] = 45; // '-' character code
        } else {
            let length = i;
        }

        do reverse();

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
