// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powersOfTwo;

    /** Initializes the library. */
    function void init() {
        var int i, powerOfTwo;

        let powersOfTwo = Array.new(16);
        let powerOfTwo = 1;
        let i = 0;

        while (i < 16) {
            let powersOfTwo[i] = powerOfTwo;
            let powerOfTwo = powerOfTwo + powerOfTwo;
            let i = i + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    function boolean bit(int x, int n) {
        if ((powersOfTwo[n] & x) = 0) {
            return 0;
        } 
        return 1;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;
        
        while (i < 16) { // numbers are represented by 16 bits
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int negX, negY;
        var int m;
        var int result;

        let negX = x < 0;
        let negY = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }
        
        let m = Math.divide(x, y+y);

        if (x-(2*m*y) < y) {
            let result = m+m;
        } else {
            let result = m + m + 1;
        }

        if (negX = negY) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, nextY, nextYSquared, i;

        let i = 7;
        let y = 0;

        while (~(i < 0)) {
            let nextY = y + powersOfTwo[i];
            let nextYSquared = nextY * nextY;
            if (~(nextYSquared > x) & (nextYSquared > 0)) {
                let y  = nextY;
            }
            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        
        return a;
    }
}
